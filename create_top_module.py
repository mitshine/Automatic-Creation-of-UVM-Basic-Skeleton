f = open("./uvm_codes/top.sv", "w")

f.write('`include "uvm_macros.svh"\n')
f.write('import uvm_pkg::*;\n')
f.write('\n')
f.write('`include "test.sv"\n')
f.write('`include "dut.v"\n')
f.write('\n')
f.write('module top;\n')
f.write('\n')
f.write('  reg clk;\n')
f.write('  // declare wires\n')
f.write('  // clock generator\n')
f.write('  initial begin\n')
f.write('    clk = 0;\n')
f.write('    forever #10 clk = ~clk;\n')
f.write('  end\n')
f.write('\n')
f.write('  // interface instantiation with virtual interface name: ifc xor_vif(.clk(clk));\n')
f.write('  // DUT instantiation with virtual interface driving the values to DUT signals\n  // for example: .xor_compl XC(.a(xor_vif.a),.clk(xor_vif.clk),.rst(xor_vif.rst),.v_a(xor_vif.v_a),.p(xor_vif.p),.v_q(xor_vif.v_q),.q(xor_vif.q));\n')
f.write('\n')
f.write('  initial\n')
f.write('    begin\n')
f.write('      set the interface_name with virtual interface name as "vif"\n')
f.write('      uvm_config_db#(virtual intf)::set(null, "*", "vif", vif);\n')
f.write('      run_test("test");\n')
f.write('    end\n')
f.write('\n')
f.write('endmodule\n')

f.close()

#open and read the file after the appending:
f = open("./uvm_codes/top.sv", "r")
print(f.read())
