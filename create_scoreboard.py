f = open("./uvm_codes/scoreboard.sv", "w")

f.write('`include "uvm_macros.svh"\n')
f.write('import uvm_pkg::*;\n')
f.write('`include "intf.sv"\n')
f.write('`include "packet.sv"\n')
f.write('\n')
f.write('`uvm_analysis_imp_decl(_FROM_MONITOR)\n')
f.write('\n')
f.write('class scoreboard extends uvm_scoreboard;\n')
f.write('     `uvm_component_utils(scoreboard)\n')
f.write('\n')
f.write('     virtual intf vif;\n')
f.write('\n')
f.write('     // create 2 queues of packet type.\n')
f.write('     packet Driver_pkt;\n')
f.write('     packet Driver_Queue[$];\n')
f.write('\n')
f.write('     int tmp1, tmp2;\n')
f.write('\n')
f.write('     uvm_analysis_imp_FROM_MONITOR #(xor_rw, scoreboard) scbd_mon_export;\n')
f.write('\n')
f.write('     function new(string name, uvm_component parent);\n')
f.write('         super.new(name, parent);\n')
f.write('         scbd_mon_export = new("scbd_mon_export", this);\n')
f.write('     endfunction\n')
f.write('\n')
f.write('     function void build();\n')
f.write('         uvm_report_info(get_full_name(),"Build", UVM_LOW);\n')
f.write('         if (!uvm_config_db#(virtual intf)::get(this, "", "vif", vif)) begin\n')
f.write('            `uvm_fatal("AXI/DRV/NOVIF", "No virtual interface specified for this driver instance")\n')
f.write('         end\n')
f.write('     endfunction\n')
f.write('\n')
f.write('     function void connect();\n')
f.write('         uvm_report_info(get_full_name(),"Connect", UVM_LOW);\n')
f.write('     endfunction\n')
f.write('\n')
f.write('     function void end_of_elaboration();\n')
f.write('         uvm_report_info(get_full_name(),"End_of_elaboration", UVM_LOW);\n')
f.write('     endfunction\n')
f.write('\n')
f.write('     function void start_of_simulation();\n')
f.write('         uvm_report_info(get_full_name(),"Start_of_simulation", UVM_LOW);\n')
f.write('     endfunction\n')
f.write('\n')
f.write('     task run_phase(uvm_phase phase);\n')
f.write('         uvm_report_info(get_full_name(),"Run", UVM_LOW);\n')
f.write('         `uvm_info("scoreboard run task", "WAITING for expected output", UVM_DEBUG)\n')
f.write('     endtask\n')
f.write('\n')
f.write('     virtual function void write_FROM_MONITOR(packet tr);\n')
f.write('        tr.print();\n')
f.write('        tmp1 = tr.a;\n')
f.write('        tmp2 = tr.q;\n')
f.write('\n')
f.write('        // Example to use queue of packet type with comparing the size of the queue.\n')
f.write('        // if (Driver_Queue.size() == 4)\n')
f.write('        // Driver_Queue.push_back(tr);\n')
f.write('        // Driver_pkt = Driver_Queue.pop_front();\n')
f.write('\n')
f.write('        if(tmp1 == tmp2)\n')
f.write('          $display("MATCHED!");\n')
f.write('        else\n')
f.write('          $display("NOT MATCHED!");\n')
f.write('     endfunction\n')
f.write('\n')
f.write('     function void extract();\n')
f.write('         uvm_report_info(get_full_name(),"Extract", UVM_LOW);\n')
f.write('     endfunction\n')
f.write('\n')
f.write('     function void check();\n')
f.write('         uvm_report_info(get_full_name(),"Check", UVM_LOW);\n')
f.write('     endfunction\n')
f.write('\n')
f.write('     function void report();\n')
f.write('         uvm_report_info(get_full_name(),"Report", UVM_LOW);\n')
f.write('     endfunction\n')
f.write('\n')
f.write('endclass\n')

f.close()

#open and read the file after the appending:
f = open("./uvm_codes/scoreboard.sv", "r")
print(f.read())