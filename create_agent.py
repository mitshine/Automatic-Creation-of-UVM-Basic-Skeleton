f = open("./uvm_codes/agent.sv", "w")

f.write('`include "uvm_macros.svh"\n')
f.write('import uvm_pkg::*;\n')
f.write('`include "monitor.sv"\n')
f.write('`include "driver.sv"\n')
f.write('`include "sequencer.sv"\n')
f.write('`include "intf.sv"\n')
f.write('\n')
f.write('class agent extends uvm_agent;\n')
f.write('     `uvm_component_utils(agent)\n')
#f.write('      protected uvm_active_passive_enum is_active = UVM_ACTIVE;\n')
f.write('\n')
f.write('      monitor mon;\n')
f.write('      driver drv;\n')
f.write('      sequencer seqr;\n')
f.write('\n')
f.write('      virtual intf vif;\n')
f.write('\n')
f.write('      uvm_analysis_port#(packet) ap;\n')
f.write('\n')
f.write('     function new(string name, uvm_component parent);\n')
f.write('         super.new(name, parent);\n')
f.write('         ap = new("ap", this);\n')
f.write('     endfunction\n')
f.write('\n')
f.write('     function void build();\n')
f.write('         uvm_report_info(get_full_name(),"Build", UVM_LOW);\n')
f.write('         if (!uvm_config_db#(virtual intf)::get(this, "", "vif", vif)) begin\n')
f.write('            `uvm_fatal("APB/AGT/NOVIF", "No virtual interface specified for this agent instance")\n')
f.write('         end\n')
f.write('         mon = monitor::type_id::create("mon",this);\n')
f.write('         drv = driver::type_id::create("drv",this);\n')
f.write('         seqr = sequencer::type_id::create("seqr",this);\n')
f.write('     endfunction\n')
f.write('\n')
f.write('     function void connect();\n')
f.write('         uvm_report_info(get_full_name(),"Connect", UVM_LOW);\n')
f.write('         // connect driver to sequencer.\n')
f.write('         drv.seq_item_port.connect(seqr.seq_item_export);\n')
f.write('         // connect monitor to analysis port.\n')
f.write('         mon.ap.connect(ap);\n')
f.write('     endfunction\n')
f.write('\n')
f.write('     function void end_of_elaboration();\n')
f.write('         uvm_report_info(get_full_name(),"End_of_elaboration", UVM_LOW);\n')
f.write('     endfunction\n')
f.write('\n')
f.write('     function void start_of_simulation();\n')
f.write('         uvm_report_info(get_full_name(),"Start_of_simulation", UVM_LOW);\n')
f.write('     endfunction\n')
f.write('\n')
f.write('     task run();\n')
f.write('         uvm_report_info(get_full_name(),"Run", UVM_LOW);\n')
f.write('     endtask\n')
f.write('\n')
f.write('     function void extract();\n')
f.write('         uvm_report_info(get_full_name(),"Extract", UVM_LOW);\n')
f.write('     endfunction\n')
f.write('\n')
f.write('     function void check();\n')
f.write('         uvm_report_info(get_full_name(),"Check", UVM_LOW);\n')
f.write('     endfunction\n')
f.write('\n')
f.write('     function void report();\n')
f.write('         uvm_report_info(get_full_name(),"Report", UVM_LOW);\n')
f.write('     endfunction\n')
f.write('\n')
f.write('endclass\n')

f.close()

#open and read the file after the appending:
f = open("./uvm_codes/agent.sv", "r")
print(f.read())