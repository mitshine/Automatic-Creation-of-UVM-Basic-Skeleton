f = open("./uvm_codes/test.sv", "w")

f.write('`include "uvm_macros.svh"\n')
f.write('import uvm_pkg::*;\n')
f.write('`include "env.sv"\n')
f.write('`include "seq.sv"\n')
f.write('`include "sequencer.sv"\n')
f.write('\n')
f.write('class test extends uvm_test;\n')
f.write('\n')
f.write('    `uvm_component_utils(test)\n')
f.write('    env env_h;\n')
f.write('    seq seq_h;\n')
f.write('    sequencer seqr_h;\n')
f.write('\n')
f.write('    function new (string name="test", uvm_component parent=null);\n')
f.write('        super.new (name, parent);\n')
f.write('    endfunction : new\n')
f.write('\n')
f.write('    function void build();\n')
f.write('        env_h = env::type_id::create("env_h",this);\n')
f.write('        seqr_h = sequencer::type_id::create("seqr_h",this);\n')
f.write('        uvm_report_info(get_full_name(),"Build", UVM_LOW);\n')
f.write('    endfunction\n')
f.write('\n')
f.write('    function void end_of_elaboration();\n')
f.write('        uvm_report_info(get_full_name(),"End_of_elaboration", UVM_LOW);\n')
f.write('        print();\n')
f.write('    endfunction : end_of_elaboration\n')
f.write('\n')
f.write('    task run_phase (uvm_phase phase);\n')
f.write('        phase.raise_objection(this);\n')
f.write('        forever begin\n')
f.write('          seq_h = seq::type_id::create("seq_h",this);\n')
f.write('          seq_h.start(env_h.agnt.seqr);\n')
f.write('        end\n')
f.write('        phase.drop_objection(this);\n')
f.write('    endtask : run_phase\n')
f.write('\n')
f.write('endclass\n')

f.close()

#open and read the file after the appending:
f = open("./uvm_codes/test.sv", "r")
print(f.read())